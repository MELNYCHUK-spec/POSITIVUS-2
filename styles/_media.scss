//SASS переменные размеров экрана
$desktop-above:1281px; // для mobile-first 1280 и выше
$desktop:1280px; //для desktop-first 0-1280

$tablet-above:1024px; //// для mobile-first 1024 и выше
$tablet:1023px;//для desktop-first 0-1023

$mobile-above:768px;// для mobile-first 767 и выше
$mobile:767px;//для desktop-first  0-767

$mobile-s-above:481px; // для mobile-first 481 и выше
$mobile-s:480px;//для desktop-first 0-480

// миксин desktop использует медиазапрос для применения стилей, когда ширина экрана меньше или равна значению переменной $desktop.
// Использование @content позволяет передавать любые стили или правила, которые вы хотите применить внутри медиазапроса.

//@media (max-width: $desktop):

//Этот медиазапрос проверяет, если ширина экрана меньше или равна значению переменной $desktop.

//$desktop — это переменная, которая должна быть определена где-то в вашем SCSS файле (например, в файле переменных).
//@content:
//Это специальное ключевое слово, которое позволяет вставить произвольный CSS-код внутрь медиазапроса. Стили, переданные в миксин через @include desktop, будут вставлены в место @content.


@mixin desktop{ //  для desktop-first 0-1280
  @media(max-width: $desktop){
    @content;
  }
}

@mixin desktop-above{//для mobile-first 1280 и выше
  @media (min-width: $desktop-above) {
    @content;
  }
}


@mixin tablet{ //для desktop-first 0-1023
  @media (max-width: $tablet) {
    @content;
  }
}

@mixin tablet-above{ //для mobile-first 1024 и выше
  @media (min-width: $tablet-above) {
    @content;
  }
}


@mixin mobile{ //для desktop-first  0-767
  @media (max-width: $mobile) {
    @content;
  }
}

@mixin mobile-above{ // для mobile-first 767 и выше
  @media (min-width: $mobile-above) {
    @content;
  }
}

@mixin mobile-s{ //для desktop-first 0-480
  @media (max-width: $mobile-s) {
    @content;
  }
}

@mixin mobile-s-above{  // для mobile-first 481 и выше
  @media (min-width: $mobile-s-above) {
    @content;
  }
}

@mixin hover {
  @media (hover: hover) {
    &:hover {
      @content; // Применяются переданные стили для :hover
    }
  }

  @media (hover: none) {
    &:active {
      @content;//Применяются переданные стили для :active
    }
  }
}

//(hover: hover): Условие в медиазапросе, проверяющее возможность ховера.
// Оно проверяет, поддерживает ли устройство свойство hover, то есть способность использовать указатель мыши для наведения на элементы.

//hover: Значение, которое обозначает, что устройство поддерживает ховер — например, на компьютерах с мышью.
// На таких устройствах можно "наводить" курсор на элемент, и он будет реагировать на это (например, изменить цвет при наведении).

//(hover: hover): Условие проверяет, поддерживает ли устройство возможность ховера.
// Например, на сенсорных устройствах (смартфонах, планшетах), которые не используют курсор мыши,
// это условие не будет истинным, и стили для ховера не будут применяться.

//&:hover: Это комбинированный селектор для :hover, который применяется при наведении на элемент.
// Символ & в SCSS ссылается на родительский элемент, к которому применяется данный миксин.
// То есть, если этот миксин будет использован для элемента с классом .button, то &:hover станет .button:hover.
//
//@content: Это директива SCSS, которая вставляет содержимое, переданное в миксин при его вызове.
// То есть, любые стили, которые будут переданы в миксин при его использовании, будут вставлены в этот блок.



//@media (hover: none) — этот блок срабатывает на устройствах, которые не поддерживают наведение (например, на смартфонах и планшетах, где нет мыши).
//Вместо наведения применяется псевдокласс :active, который активируется, когда пользователь касается экрана (или кликает элемент).
//
//@content — это специальная директива, которая позволяет вставить содержимое, переданное в миксин. В основном это правила или стили,
// которые вы хотите применить к элементу в состоянии :hover или :active.


//@content — это специальная директива в SASS, которая используется в миксинах с параметром "content block".
// Она позволяет вставлять дополнительные стили или код в миксин, делая его более гибким и динамичным.
// Это позволяет создавать миксины, которые могут принимать не только параметры, но и блоки кода, которые будут вставлены в определенное место в миксине.

//@mixin имя-миксина {
//  // Основной стиль
//  @content; // Вставка переданного контента
//}